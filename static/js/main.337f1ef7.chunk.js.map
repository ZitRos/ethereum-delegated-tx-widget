{"version":3,"sources":["const/ethereum.js","const/backends.js","const/apis.js","utils/http.js","utils/ethereum.js","const/react-messages.js","utils/state.js","state/state.js","state/reactions/back-end-request.js","state/reactions/back-end-response.js","state/reactions/update-token-meta.js","state/reactions/back-end-polling.js","state/reactions/misc.js","state/reactions/update-url.js","state/init.js","components/TransferArrow/index.js","components/TokenLogo/index.js","components/WarningIcon/index.js","components/InfoIcon/index.js","components/Button/index.js","modules/ethereum/provider.js","App.js","serviceWorker.js","index.js"],"names":["UNKNOWN_NETWORK","Object","freeze","chainId","name","NETWORK_BY_CHAIN_ID","1","ensAddress","3","2","4","5","42","61","62","DELEGATED_TX_BACK_ENDS","INFURA_PUBLIC_API_KEY","httpRequest","url","a","method","data","undefined","Promise","resolve","reject","xhr","XMLHttpRequest","open","setRequestHeader","onload","readyState","status","JSON","parse","responseText","parsed","error","e","onerror","send","stringify","httpGet","httpPost","formatEthereumAddress","address","slice","formatTokenValue","value","decimals","toString","test","pow","match","replace","padEnd","padStart","substring","length","substr","ethCall","networkName","contractAddress","functionSignature","id","jsonrpc","params","utils","to","response","result","signData","state","standard","provider","ethersProvider","currentEthereumAccount","res","WARNING_NO_WEB3","target","rel","href","WARNING_WRONG_NETWORK","targetNetwork","currentNetwork","WARNING_UNKNOWN_NETWORK","network","WARNING_CUSTOM_MESSAGE","message","WARNING_UNABLE_TO_CONNECT_WEB3","WARNING_WRONG_URL_PARAMETER","WARNING_BACK_END_ERROR","WARNING_BACK_END_INVALID_RESPONSE","INFO_PROCESSING","getBackEndContracts","backEndsByContractReadOnly","filter","b","networkChainId","selectedNetwork","updateUrl","action","window","history","replaceState","document","title","location","pathname","functionName","functionArguments","join","fixed","observable","selectedNetworkNameReadOnly","globalInfoMessage","globalWarningMessage","initWarningMessage","networkWarningMessage","backendWarningMessage","contractSymbolReadOnly","contractDecimalsReadOnly","backEndsMeta","approvedDelegationRequest","approvedDelegationResponse","delegationConfirmationRequestPending","find","targetNetworks","map","WARNING_SUPPORTED_CONTRACT_WRONG_NETWORK","Array","from","Set","c","console","log","backEndRequested","requestBackEnd","warningMessageReadOnly","backEndErrors","all","meta","functions","f","warn","signer","push","request","signatureOptions","runInAction","r","responses","bestBackEnd","reduce","best","be","fee","assign","toJS","clearAndRequest","observe","oldFixed","signatureOptionsPriority","signOptionsByPriority","sort","o1","o2","indexOf","signature","signatureStandard","signOption","dataToSign","rej","nextStandard","Error","onClick","then","catch","pop","signatureStandards","o","requestId","loadTokenMeta","symbol","parseBytes32String","parseInt","info","pollingInterval","updateFromBackEnd","actualStatus","clearInterval","txHash","key","INFO_WAIT_FOR_TRANSACTION","transactionHash","setInterval","reason","WARNING_TRANSACTION_FAILED","INFO_TRANSACTION_MINED","forEach","prop","search","values","net","split","backEndsReady","addBackEnds","backEnd","contracts","contractBackEnd","concat","interval","TransferArrow","className","TokenLogo","props","tokenAddress","assetUrl","src","alt","WarningIcon","version","xmlns","x","y","width","height","viewBox","fill","d","InfoIcon","Button","loading","rest","children","wrapEthersProvider","web3Provider","reportStatus","getWeb3Provider","providers","Web3Provider","currentProvider","ethereum","web3","Web3","enable","getContractNetworks","isCurrentNetworkTarget","isButtonActive","App","tick","accountUpdateTimeout","tickerInterval","ticker","setState","updateFromProvider","listAccounts","account","getNetwork","setTimeout","contractsInOtherNetworks","componentDidMount","actionButtonClick","onRecipientChange","clearTimeout","this","sender","recipient","Math","warning","isLoading","tzOffset","Date","getTimezoneOffset","nowUtc","now","expiresIn","max","expiresAt","getTime","toTimeString","disabled","onChange","React","PureComponent","observer","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.337f1ef7.chunk.js","sourcesContent":["export const UNKNOWN_NETWORK = Object.freeze({\n  chainId: -1,\n  name: 'unknown-network'\n});\n\nexport const NETWORK_BY_CHAIN_ID = {\n  1: {\n    chainId: 1,\n    ensAddress: '0x314159265dd8dbb310642f98f50c066173c1259b',\n    name: 'homestead'\n  },\n  3: {\n    chainId: 3,\n    ensAddress: '0x112234455c3a32fd11230c42e7bccd4a84e02010',\n    name: 'ropsten'\n  },\n  2: {\n    chainId: 2,\n    name: 'morden'\n  },\n  4: {\n    chainId: 4,\n    ensAddress: '0xe7410170f87102DF0055eB195163A03B7F2Bff4A',\n    name: 'rinkeby'\n  },\n  5: {\n    chainId: 5,\n    ensAddress: '0x112234455c3a32fd11230c42e7bccd4a84e02010',\n    name: 'goerli'\n  },\n  42: {\n    chainId: 42,\n    name: 'kovan'\n  },\n  61: {\n    chainId: 61,\n    name: 'classic'\n  },\n  62: {\n    chainId: 62,\n    name: 'classicTestnet'\n  }\n};\n","// The widget will try to get metadata from all back ends listed here.\nexport const DELEGATED_TX_BACK_ENDS = [\n  'http://localhost:8088',\n  'https://dapp.ml/delegated-tx-mainnet',\n  'https://dapp.ml/delegated-tx'\n];\n","export const INFURA_PUBLIC_API_KEY = '26330e580e9d49ffb91482c15a92e86a';\n","async function httpRequest(url, method = 'GET', data = undefined) {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open(method, url, true);\n    if (data) {\n      xhr.setRequestHeader('Content-Type', 'application/json');\n    }\n    xhr.onload = () => {\n      if (xhr.readyState === 4 && xhr.status >= 200 && xhr.status < 300) {\n        resolve(JSON.parse(xhr.responseText));\n      } else {\n        if (!xhr.responseText) {\n          reject(`HTTPCODE ${xhr.status}`);\n          return;\n        }\n        try {\n          const parsed = JSON.parse(xhr.responseText);\n          reject(\n            (parsed && (parsed.error || parsed)) ||\n              `HTTPCODE ${xhr.status}, ${xhr.responseText}`\n          );\n          return;\n        } catch (e) {\n          reject(xhr.responseText);\n        }\n      }\n    };\n    xhr.onerror = () => reject('request failed');\n    xhr.send(data && JSON.stringify(data));\n  });\n}\n\nexport const httpGet = async url => httpRequest(url);\nexport const httpPost = async (url, data) => httpRequest(url, 'POST', data);\n","import { utils } from 'ethers';\nimport { httpPost } from './http';\nimport { INFURA_PUBLIC_API_KEY } from '../const';\n\nexport function formatEthereumAddress(address) {\n  if (!address) {\n    return '0x????..????';\n  }\n  return address.slice(0, 6) + '..' + address.slice(-4);\n}\n\nexport function formatTokenValue(value, decimals = 18) {\n  value = value.toString();\n  if (/e\\+[0-9]+$/.test(value)) {\n    const pow = +value.match(/[0-9]+$/)[0];\n    value = value.replace(/\\./, '').replace(/e\\+[0-9]+$/, '');\n    value = value.padEnd(1 + pow, '0');\n  }\n  value = value.padStart(decimals + 1, '0');\n  return (\n    value.substring(0, value.length - decimals) +\n    '.' +\n    value.substr(-decimals, 2)\n  );\n}\n\nexport function isValidEthereumAddress(address) {\n  return typeof address === 'string' && /0x[0-9a-f]{40}/i.test(address);\n}\n\nexport async function ethCall(networkName, contractAddress, functionSignature) {\n  const response = await httpPost(\n    `https://${networkName}.infura.io/v3/${INFURA_PUBLIC_API_KEY}`,\n    {\n      id: 42,\n      jsonrpc: '2.0',\n      method: 'eth_call',\n      params: [\n        {\n          data:\n            utils.id(functionSignature).slice(0, 10) +\n            '00000000000000000000000000000000000000000000000000000000',\n          to: contractAddress\n        },\n        'latest'\n      ]\n    }\n  );\n  return response.result;\n}\n\nexport async function signData(state, standard, data) {\n  const provider = state.ethersProvider;\n  try {\n    if (standard === 'eth_signTypedData') {\n      const res = await provider.send('eth_signTypedData', [\n        data,\n        state.currentEthereumAccount.toString()\n      ]);\n      return res;\n    } else if (standard === 'eth_personalSign') {\n      const res = await provider.send('eth_sign', [\n        data,\n        state.currentEthereumAccount.toString()\n      ]);\n      return res;\n    }\n  } catch (e) {\n    return '';\n  }\n}\n","import React from 'react';\nimport { formatEthereumAddress } from '../utils/ethereum';\n\nexport const WARNING_NO_WEB3 = (\n  <span>\n    In order to use this delegated transactions service, you need to browse this\n    page with{' '}\n    <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://metamask.io\">\n      Metamask wallet\n    </a>{' '}\n    extension or from your{' '}\n    <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://trustwallet.com\">\n      mobile wallet&apos;s\n    </a>{' '}\n    embedded DApp browser (if supported).\n  </span>\n);\n\nexport const WARNING_WRONG_NETWORK = (targetNetwork, currentNetwork) => (\n  <span>\n    Please, switch your wallet to{' '}\n    <strong>\n      {targetNetwork === 'homestead' ? 'mainnet' : targetNetwork} network\n    </strong>{' '}\n    (it is currently on {currentNetwork} network).\n  </span>\n);\n\nexport const WARNING_UNKNOWN_NETWORK = network => (\n  <span>\n    Unknown network selected in your wallet ({network}). Please, switch to main\n    network or known testnets (ropsten/kovan)\n  </span>\n);\n\nexport const WARNING_CUSTOM_MESSAGE = message => <span>{message}</span>;\n\nexport const WARNING_UNABLE_TO_CONNECT_WEB3 = message => (\n  <span>Unable to connect to your wallet. {message}</span>\n);\n\nexport const WARNING_WRONG_URL_PARAMETER = (name, value) => (\n  <span>\n    Configuration error: unknown or wrong URL parameter &quot;{name}\n    &quot;=&quot;{value}&quot;.\n  </span>\n);\n\nexport const WARNING_CONTRACT_NOT_SUPPORTED = contractAddress => (\n  <span>\n    There is no back end for contract {formatEthereumAddress(contractAddress)}{' '}\n    found which supports delegated transactions. If this contract indeed\n    supports delegated transactions, you may add it by contributing to{' '}\n    <a\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      href=\"https://github.com/ZitRos/ethereum-delegated-tx-widget\"\n    >\n      this project\n    </a>\n    .\n  </span>\n);\n\nexport const WARNING_SUPPORTED_CONTRACT_WRONG_NETWORK = (\n  currentNetwork,\n  targetNetworks = []\n) => (\n  <span>\n    Configured back ends support only{' '}\n    <strong>\n      {targetNetworks\n        .map(targetNetwork =>\n          targetNetwork === 'homestead' ? 'mainnet' : targetNetwork\n        )\n        .join(' or ')}\n    </strong>{' '}\n    network{targetNetworks.length > 1 ? 's' : ''} for this contract. Please,{' '}\n    switch your wallet to {targetNetworks.length > 1 ? 'these' : 'this'} network\n    {targetNetworks.length > 1 ? 's' : ''} (it is currently on {currentNetwork}{' '}\n    network).\n  </span>\n);\n\nexport const WARNING_BACK_END_ERROR = (url, res) => (\n  <span>\n    Delegated back end {url} error: {res}\n  </span>\n);\n\nexport const WARNING_BACK_END_INVALID_RESPONSE = (url, res) => (\n  <span>\n    Delegated back end {url} invalid response: {res}\n  </span>\n);\n\nexport const WARNING_CONFIRMATION_BACK_END_ERROR = (url, message) => (\n  <span>\n    Unable to confirm delegated request. Delegated back end {url} responds with\n    this error: {message}\n    <br />\n    <strong>\n      <u>Check your token balance and reload this page once refilled.</u>\n    </strong>\n  </span>\n);\n\nexport const WARNING_TRANSACTION_FAILED = (requestId, reason = '') => (\n  <span>\n    Unfortunately, delegated transaction {requestId} has failed.{' '}\n    {reason\n      ? `${reason}`\n      : 'This could happen due to request expiration, network conditions or due to failing delegated back end. However, you can retry.'}\n  </span>\n);\n\nexport const INFO_PLEASE_SIGN = nextStandard => (\n  <span>\n    Please, confirm the signature in your wallet. If nothing happens, try\n    re-opening your wallet.\n    {nextStandard ? (\n      <span>\n        {' '}\n        You can also try using the{' '}\n        <a href=\"#\" onClick={nextStandard}>\n          <b>next signature standard</b>\n        </a>\n        .\n      </span>\n    ) : null}\n  </span>\n);\n\nexport const INFO_PLEASE_SIGN_AGAIN = signatureStandards => (\n  <span>\n    For some reason, we were unable to get a signature from you. Please, try\n    again. Available signature standards: {signatureStandards.join(', ')}\n  </span>\n);\n\nexport const INFO_PROCESSING = <span>Processing, please wait...</span>;\n\nexport const INFO_WAIT_FOR_TRANSACTION = (txHash, network = 'mainnet') => (\n  <span>\n    Your transaction{' '}\n    {txHash ? (\n      <span key=\"span-swan\">\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href={`https://${\n            network === 'mainnet' ? '' : network + '.'\n          }etherscan.io/tx/${txHash}`}\n        >\n          {formatEthereumAddress(txHash)}\n        </a>{' '}\n      </span>\n    ) : null}\n    is on its way! Please wait until it is mined, it might take some time.\n  </span>\n);\n\nexport const INFO_TRANSACTION_MINED = (txHash, network = 'mainnet') => (\n  <span>\n    Done! Your transaction is mined:{' '}\n    <a\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      href={`https://${\n        network === 'mainnet' ? '' : network + '.'\n      }etherscan.io/tx/${txHash}`}\n    >\n      {formatEthereumAddress(txHash)}\n    </a>\n  </span>\n);\n","import { action } from 'mobx';\n\nexport const getBackEndContracts = state =>\n  (state.backEndsByContractReadOnly[state.contractAddress] &&\n    state.backEndsByContractReadOnly[state.contractAddress].length &&\n    state.backEndsByContractReadOnly[state.contractAddress].filter(\n      b => b.networkChainId === state.selectedNetwork.chainId\n    )) ||\n  [];\n\nexport const updateUrl = action(state => {\n  window.history.replaceState(\n    {},\n    document.title,\n    `${window.location.pathname}?contractAddress=${\n      state.contractAddress\n    }&functionName=${\n      state.functionName\n    }&functionArguments=${state.functionArguments.join(',')}${\n      state.fixed ? '&fixed' : ''\n    }`\n  );\n});\n","import { observable } from 'mobx';\nimport {\n  UNKNOWN_NETWORK,\n  NETWORK_BY_CHAIN_ID,\n  WARNING_NO_WEB3,\n  WARNING_CONTRACT_NOT_SUPPORTED,\n  WARNING_SUPPORTED_CONTRACT_WRONG_NETWORK\n} from '../const';\n\nconst state = observable({\n  currentEthereumAccount: '',\n  targetNetwork: NETWORK_BY_CHAIN_ID[1], // Default to mainnet\n  selectedNetwork: UNKNOWN_NETWORK, // Network currently selected by user\n  selectedNetworkNameReadOnly: UNKNOWN_NETWORK.name,\n  ethersProvider: null,\n\n  globalInfoMessage: null, // When set, displayed if warnings are empty\n  globalWarningMessage: null, // Displayed on top of all other warnings if set\n  initWarningMessage: WARNING_NO_WEB3,\n  networkWarningMessage: null,\n  backendWarningMessage: null,\n\n  contractAddress: '0x82f4ded9cec9b5750fbff5c2185aee35afc16587',\n  contractSymbolReadOnly: 'DREAM', // Updates automatically once `contractAddress` changes\n  contractDecimalsReadOnly: 6, // Updates automatically once `contractAddress` changes\n  functionName: 'transfer',\n  functionArguments: ['0xB3311c91d7c1B305DA3567C2320B716B13F24F8A', '9990000'],\n  fixed: false, // Whether inputs are editable or not\n\n  backEndsMeta: [], // Metadata of all back ends collected from root endpoint. See ./init\n  backEndsByContractReadOnly: {}, // Map contract => [back end 1, back end 2, ...]. Computed within backEndsMeta\n\n  // Best back end response (where the fee is the lowest) + .meta with back end metadata (such as .meta.url)\n  approvedDelegationRequest: null, // Object - response of /request + .meta property (.meta.url)\n  approvedDelegationResponse: null, // Object - response of /response + .meta property (.meta.url)\n  delegationConfirmationRequestPending: false,\n\n  // Refer to this property to understand whether there are any warning messages\n  get warningMessageReadOnly() {\n    return (\n      state.globalWarningMessage ||\n      state.initWarningMessage ||\n      state.networkWarningMessage ||\n      state.backendWarningMessage ||\n      (!state.backEndsByContractReadOnly[state.contractAddress] &&\n        WARNING_CONTRACT_NOT_SUPPORTED(state.contractAddress)) ||\n      (!state.backEndsByContractReadOnly[state.contractAddress].find(\n        b => b.networkChainId === state.selectedNetwork.chainId\n      ) && // Nado eshe podymat'\n        WARNING_SUPPORTED_CONTRACT_WRONG_NETWORK(\n          state.selectedNetwork.name,\n          Array.from(\n            new Set(\n              state.backEndsByContractReadOnly[state.contractAddress].map(\n                c => c.networkName\n              )\n            )\n          )\n        ))\n    );\n  }\n});\n\nconsole.log('state', state);\n\nexport default state;\n","import { observe, action, runInAction, toJS } from 'mobx';\nimport {\n  WARNING_BACK_END_ERROR,\n  WARNING_BACK_END_INVALID_RESPONSE\n} from '../../const';\nimport { getBackEndContracts, httpPost } from '../../utils';\nimport state from '../state';\n\nlet backEndRequested = false;\n\nconst requestBackEnd = action(async () => {\n  // Ignore if request is already made or there are any warning messages\n  if (!!state.warningMessageReadOnly || backEndRequested) {\n    return;\n  }\n\n  backEndRequested = true;\n\n  // Request back end\n  let backEndErrors = [];\n  const responses = (await Promise.all(\n    getBackEndContracts(state).map(async meta => {\n      if (\n        !meta ||\n        !meta.url ||\n        !meta.functions ||\n        !meta.functions.find(f => f.name === state.functionName)\n      ) {\n        console.warn(\n          `Weird back end ${meta.url}, ${JSON.stringify(meta, null, 4)}`\n        );\n        return null; // Invalid back end\n      }\n      let res;\n      try {\n        res = await httpPost(`${meta.url}/request`, {\n          contractAddress: state.contractAddress,\n          signer: state.currentEthereumAccount,\n          functionName: state.functionName,\n          functionArguments: state.functionArguments\n        });\n      } catch (e) {\n        backEndErrors.push([meta.url, e]);\n        console.warn(`Weird back end, POST ${meta.url}/request:`, e);\n        return null;\n      }\n      if (\n        !res ||\n        !res.request ||\n        !res.request.id ||\n        !(res.request.signatureOptions instanceof Array) ||\n        res.request.signatureOptions.length === 0\n      ) {\n        runInAction(\n          () =>\n            (state.backendWarningMessage = WARNING_BACK_END_INVALID_RESPONSE(\n              meta.url,\n              JSON.stringify(res)\n            ))\n        );\n        return null;\n      }\n      return [res.request, meta];\n    })\n  )).filter(r => !!r);\n\n  if (\n    (backEndErrors.length > 0 && !state.backendWarningMessage) ||\n    responses.length === 0\n  ) {\n    runInAction(() => {\n      const [url, e] =\n        backEndErrors.length > 0 ? backEndErrors[0] : ['*', 'silence'];\n      state.backendWarningMessage = WARNING_BACK_END_ERROR(url, e.toString());\n    });\n    return;\n  }\n\n  const bestBackEnd = responses.reduce(\n    (best, be) => (be[0].fee < best[0].fee ? be : best),\n    responses[0]\n  );\n\n  runInAction(() => {\n    if (state.backendWarningMessage) {\n      state.backendWarningMessage = null;\n    }\n    if (bestBackEnd) {\n      state.approvedDelegationRequest = Object.assign(bestBackEnd[0], {\n        meta: toJS(bestBackEnd[1])\n      });\n    }\n  });\n});\n\nconst clearAndRequest = action(() => {\n  backEndRequested = false;\n  if (state.backendWarningMessage) {\n    state.backendWarningMessage = null;\n  }\n  if (state.approvedDelegationRequest) {\n    state.approvedDelegationRequest = null;\n  }\n  requestBackEnd();\n});\n\nobserve(state, 'warningMessageReadOnly', requestBackEnd);\nobserve(state, 'contractAddress', clearAndRequest);\nobserve(state, 'functionArguments', clearAndRequest);\n","import { observe, action, runInAction, toJS } from 'mobx';\nimport {\n  WARNING_BACK_END_ERROR,\n  WARNING_CONFIRMATION_BACK_END_ERROR,\n  INFO_PLEASE_SIGN,\n  INFO_PLEASE_SIGN_AGAIN,\n  INFO_PROCESSING\n} from '../../const';\nimport { httpPost, signData } from '../../utils';\nimport state from '../state';\n\nobserve(\n  state,\n  'delegationConfirmationRequestPending',\n  action(async () => {\n    // React only to pending request start\n    if (\n      state.delegationConfirmationRequestPending !== true ||\n      !state.approvedDelegationRequest\n    ) {\n      return;\n    }\n\n    // Sign with available signature standards\n    const oldFixed = state.fixed;\n    runInAction(() => (state.fixed = true));\n    const signatureOptionsPriority = ['eth_signTypedData', 'eth_personalSign'];\n    const signOptionsByPriority = toJS(\n      state.approvedDelegationRequest.signatureOptions\n    ).sort(\n      (o1, o2) =>\n        (signatureOptionsPriority.indexOf(o2.standard) + 1 || 999) -\n        (signatureOptionsPriority.indexOf(o1.standard) + 1 || 999)\n    );\n\n    let signOption;\n    let signature = '';\n    let signatureStandard = '';\n    while ((signOption = signOptionsByPriority.pop())) {\n      const { standard, dataToSign } = signOption;\n      try {\n        signature = await new Promise((res, rej) => {\n          runInAction(\n            () =>\n              (state.globalInfoMessage = INFO_PLEASE_SIGN(\n                signOptionsByPriority.length\n                  ? () => rej(new Error('Skipped by user'))\n                  : null\n              ))\n          );\n          try {\n            signData(state, standard, dataToSign)\n              .then(res)\n              .catch(rej);\n          } catch (e) {\n            rej(e);\n          }\n        });\n      } catch (e) {\n        // Do nothing - it should switch to the next available signature standard\n      }\n      signatureStandard = standard;\n      if (signature) {\n        break;\n      }\n    }\n    if (!signature) {\n      runInAction(() => {\n        state.globalInfoMessage = INFO_PLEASE_SIGN_AGAIN(\n          toJS(state.approvedDelegationRequest.signatureOptions).map(\n            o => o.standard\n          )\n        );\n        state.delegationConfirmationRequestPending = false;\n        state.fixed = oldFixed;\n      });\n      return;\n    } else {\n      runInAction(() => (state.globalInfoMessage = INFO_PROCESSING));\n    }\n\n    // Confirm request with signature\n    let response;\n    try {\n      response = await httpPost(\n        `${state.approvedDelegationRequest.meta.url}/confirm`,\n        {\n          requestId: state.approvedDelegationRequest.id,\n          signatureStandard,\n          signature\n        }\n      );\n    } catch (e) {\n      runInAction(() => {\n        state.globalInfoMessage = '';\n        state.globalWarningMessage = WARNING_CONFIRMATION_BACK_END_ERROR(\n          state.approvedDelegationRequest.meta.url,\n          e + ''\n        );\n        state.delegationConfirmationRequestPending = false;\n        state.fixed = oldFixed;\n      });\n      console.error(e);\n      return;\n    }\n\n    // Process response\n    console.log('Success!', response);\n    runInAction(() => {\n      if (!response || !response.result) {\n        state.globalWarningMessage = WARNING_BACK_END_ERROR(\n          state.approvedDelegationRequest.meta.url,\n          `Weird back end response: ${JSON.stringify(response)}`\n        );\n        return;\n      }\n      const result = response.result;\n      result.meta = state.approvedDelegationRequest.meta;\n      state.approvedDelegationResponse = result;\n    });\n  })\n);\n","import { observe, action, runInAction } from 'mobx';\nimport { utils } from 'ethers';\nimport { ethCall } from '../../utils';\nimport state from '../state';\n\nconst loadTokenMeta = action(async () => {\n  const networkName =\n    state.targetNetwork.name === 'homestead'\n      ? 'mainnet'\n      : state.targetNetwork.name;\n  let symbol, decimals;\n  try {\n    [symbol, decimals] = await Promise.all([\n      ethCall(networkName, state.contractAddress, 'symbol()'),\n      ethCall(networkName, state.contractAddress, 'decimals()')\n    ]);\n    runInAction(() => {\n      state.contractSymbolReadOnly = utils.parseBytes32String(\n        '0x' + symbol.substr(64 * 2 + 2, 64 * 2 + 2 + 64)\n      );\n      state.contractDecimalsReadOnly = parseInt(decimals);\n    });\n  } catch (e) {\n    runInAction(() => {\n      state.contractSymbolReadOnly = 'Tokens';\n      state.contractDecimalsReadOnly = 18;\n    });\n    if (symbol !== '0x') {\n      console.info('Unable to determine token symbol', e);\n    } // Otherwise it is not present in the network and it's fine\n  }\n});\n\nobserve(state, 'contractAddress', loadTokenMeta);\nobserve(state, 'targetNetwork', loadTokenMeta);\n","import { observe, action } from 'mobx';\nimport {\n  WARNING_BACK_END_INVALID_RESPONSE,\n  WARNING_TRANSACTION_FAILED,\n  INFO_TRANSACTION_MINED,\n  INFO_WAIT_FOR_TRANSACTION\n} from '../../const';\nimport { httpGet } from '../../utils';\nimport state from '../state';\n\nlet pollingInterval = 0;\nobserve(\n  state,\n  'approvedDelegationResponse',\n  action(() => {\n    clearInterval(pollingInterval);\n    if (!state.approvedDelegationResponse) {\n      return;\n    }\n    if (state.approvedDelegationResponse.status === 'mined') {\n      state.globalInfoMessage = INFO_TRANSACTION_MINED(\n        state.approvedDelegationResponse.transactionHash,\n        state.selectedNetworkNameReadOnly\n      );\n      return;\n    } else if (state.approvedDelegationResponse.status === 'failed') {\n      state.globalWarningMessage = WARNING_TRANSACTION_FAILED(\n        state.approvedDelegationResponse.id,\n        state.approvedDelegationResponse.reason\n      );\n      return;\n    } else {\n      state.globalInfoMessage = INFO_WAIT_FOR_TRANSACTION(\n        state.approvedDelegationResponse.transactionHash,\n        state.selectedNetworkNameReadOnly\n      );\n    }\n    pollingInterval = setInterval(updateFromBackEnd, 10000);\n    // Do not update immediately but after one interval\n  })\n);\n\nasync function updateFromBackEnd() {\n  const { id, status, meta } = state.approvedDelegationResponse;\n  let actualStatus;\n  try {\n    actualStatus = await httpGet(`${meta.url}/status/${id}`);\n  } catch (e) {\n    // eslint-disable-next-line require-atomic-updates\n    state.globalWarningMessage = WARNING_BACK_END_INVALID_RESPONSE(\n      meta.url,\n      e.toString()\n    );\n    return;\n  }\n  if (!actualStatus || !actualStatus.result) {\n    // eslint-disable-next-line require-atomic-updates\n    state.globalWarningMessage = WARNING_BACK_END_INVALID_RESPONSE(\n      meta.url,\n      `weird response ${actualStatus}`\n    );\n    return;\n  }\n\n  // Process status\n  const result = actualStatus.result;\n  if (result.status === status) {\n    return;\n  }\n\n  result.meta = meta;\n  // eslint-disable-next-line require-atomic-updates\n  action(() => {\n    state.approvedDelegationResponse = result;\n  })();\n}\n","import { observe, action } from 'mobx';\nimport state from '../state';\n\nobserve(\n  state,\n  'selectedNetwork',\n  action(() => {\n    state.selectedNetworkNameReadOnly =\n      state.selectedNetwork.name === 'homestead'\n        ? 'mainnet'\n        : state.selectedNetwork.name;\n  })\n);\n","import { observe } from 'mobx';\nimport state from '../state';\nimport { updateUrl } from '../../utils';\n\nconst observeProps = [\n  'contractAddress',\n  'functionName',\n  'functionArguments',\n  'fixed'\n];\n\nobserveProps.forEach(prop => observe(state, prop, () => updateUrl(state)));\n","import state from './state';\nimport { action, runInAction } from 'mobx';\nimport { parse } from 'qs';\nimport {\n  DELEGATED_TX_BACK_ENDS,\n  NETWORK_BY_CHAIN_ID,\n  UNKNOWN_NETWORK,\n  WARNING_WRONG_URL_PARAMETER\n} from '../const';\nimport { httpGet, isValidEthereumAddress, updateUrl } from '../utils';\n\nconst url = parse(window.location.search.slice(1));\n\n/// Sync actions:\n/// - Parse URL components\n/// - Determine target network\naction(() => {\n  if (url.network) {\n    if (url.network === 'mainnet') {\n      url.network = 'homestead';\n    }\n    if (parseInt(url.network) === +url.network) {\n      state.targetNetwork = NETWORK_BY_CHAIN_ID[url.network];\n    } else {\n      state.targetNetwork = Object.values(NETWORK_BY_CHAIN_ID).find(\n        net => net.name === url.network\n      );\n    }\n    // If bad network configured\n    if (!state.targetNetwork) {\n      state.targetNetwork = UNKNOWN_NETWORK;\n      state.globalWarningMessage = WARNING_WRONG_URL_PARAMETER(\n        'network',\n        url.network\n      );\n    }\n  }\n  // Keep below network\n  if (url.contractAddress) {\n    if (isValidEthereumAddress(url.contractAddress)) {\n      state.contractAddress = url.contractAddress;\n    } else {\n      state.globalWarningMessage = WARNING_WRONG_URL_PARAMETER(\n        'contractAddress',\n        url.contractAddress\n      );\n    }\n  }\n  if (url.functionArguments) {\n    state.functionArguments = url.functionArguments.split(',');\n  }\n  if (typeof url.fixed !== 'undefined') {\n    state.fixed = true;\n  }\n  updateUrl(state);\n})();\n\n/// Fetch back ends metadata\n// Because querying back ends can take up to 30 seconds, this function throttles the responses\n// and adds them to the state once they are ready.\naction(async () => {\n  const backEndsReady = [];\n  const addBackEnds = () => {\n    runInAction(() => {\n      let backEnd, url;\n      while (([backEnd, url] = backEndsReady.pop() || []) && backEnd) {\n        state.backEndsMeta.push(backEnd);\n        if (!backEnd.contracts || !(backEnd.contracts instanceof Array)) {\n          console.warn(\n            `Back end endpoint GET ${url} does not provide contracts[]`\n          );\n        }\n        for (const contractBackEnd of backEnd.contracts || []) {\n          state.backEndsByContractReadOnly = {\n            ...state.backEndsByContractReadOnly,\n            [contractBackEnd.address]: (\n              state.backEndsByContractReadOnly[contractBackEnd.address] || []\n            ).concat({\n              ...contractBackEnd,\n              url,\n              networkChainId: backEnd.networkChainId,\n              networkName: backEnd.networkName\n            })\n          };\n        }\n      }\n    });\n  };\n  const interval = setInterval(addBackEnds, 250);\n  await Promise.all(\n    DELEGATED_TX_BACK_ENDS.map(async url => {\n      url = await url; // Resolve promises\n      try {\n        const meta = await httpGet(url);\n        backEndsReady.push([meta, url]);\n      } catch (e) {\n        console.error(`Back end ${url} responds with error.`, e);\n      }\n    })\n  );\n  // Clear the interval once all back ends are loaded\n  clearInterval(interval);\n  addBackEnds();\n})();\n","import React from 'react';\nimport './TransferArrow.css';\n\nexport default function TransferArrow() {\n  return (\n    <div className=\"round\">\n      <div className=\"cta\">\n        <span className=\"arrow arr1 next\"></span>\n        <span className=\"arrow arr2 next\"></span>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TokenLogo.css';\n\nexport default function TokenLogo(props) {\n  const tokenAddress =\n    props.tokenAddress || '0x82f4ded9cec9b5750fbff5c2185aee35afc16587';\n  const assetUrl = `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/${tokenAddress}/logo.png`;\n  return <img className=\"token-logo-img\" src={assetUrl} alt=\"\" />;\n}\n\nTokenLogo.propTypes = {\n  tokenAddress: PropTypes.string\n};\n","import React from 'react';\nimport './WarningIcon.css';\n\nexport default function WarningIcon() {\n  return (\n    <svg\n      version=\"1.1\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      x=\"0px\"\n      y=\"0px\"\n      width=\"16px\"\n      height=\"16px\"\n      viewBox=\"0 0 554.2 554.199\"\n      className=\"warning-icon\"\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M538.5,386.199L356.5,70.8c-16.4-28.4-46.7-45.9-79.501-45.9c-32.8,0-63.1,17.5-79.5,45.9L12.3,391.6\n        c-16.4,28.4-16.4,63.4,0,91.8C28.7,511.8,59,529.3,91.8,529.3H462.2c0.101,0,0.2,0,0.2,0c50.7,0,91.8-41.101,91.8-91.8\n        C554.2,418.5,548.4,400.8,538.5,386.199z M316.3,416.899c0,21.7-16.7,38.3-39.2,38.3s-39.2-16.6-39.2-38.3V416\n        c0-21.601,16.7-38.301,39.2-38.301S316.3,394.3,316.3,416V416.899z M317.2,158.7L297.8,328.1c-1.3,12.2-9.4,19.8-20.7,19.8\n        s-19.4-7.7-20.7-19.8L237,158.6c-1.3-13.1,5.801-23,18-23H299.1C311.3,135.7,318.5,145.6,317.2,158.7z\"\n      />\n    </svg>\n  );\n}\n","import React from 'react';\nimport './InfoIcon.css';\n\nexport default function InfoIcon() {\n  return (\n    <svg\n      version=\"1.1\"\n      x=\"0px\"\n      y=\"0px\"\n      width=\"16px\"\n      height=\"16px\"\n      viewBox=\"0 0 23.625 23.625\"\n      className=\"info-icon\"\n    >\n      <g>\n        <path\n          fill=\"currentColor\"\n          d=\"M11.812,0C5.289,0,0,5.289,0,11.812s5.289,11.813,11.812,11.813s11.813-5.29,11.813-11.813\n        S18.335,0,11.812,0z M14.271,18.307c-0.608,0.24-1.092,0.422-1.455,0.548c-0.362,0.126-0.783,0.189-1.262,0.189\n        c-0.736,0-1.309-0.18-1.717-0.539s-0.611-0.814-0.611-1.367c0-0.215,0.015-0.435,0.045-0.659c0.031-0.224,0.08-0.476,0.147-0.759\n        l0.761-2.688c0.067-0.258,0.125-0.503,0.171-0.731c0.046-0.23,0.068-0.441,0.068-0.633c0-0.342-0.071-0.582-0.212-0.717\n        c-0.143-0.135-0.412-0.201-0.813-0.201c-0.196,0-0.398,0.029-0.605,0.09c-0.205,0.063-0.383,0.12-0.529,0.176l0.201-0.828\n        c0.498-0.203,0.975-0.377,1.43-0.521c0.455-0.146,0.885-0.218,1.29-0.218c0.731,0,1.295,0.178,1.692,0.53\n        c0.395,0.353,0.594,0.812,0.594,1.376c0,0.117-0.014,0.323-0.041,0.617c-0.027,0.295-0.078,0.564-0.152,0.811l-0.757,2.68\n        c-0.062,0.215-0.117,0.461-0.167,0.736c-0.049,0.275-0.073,0.485-0.073,0.626c0,0.356,0.079,0.599,0.239,0.728\n        c0.158,0.129,0.435,0.194,0.827,0.194c0.185,0,0.392-0.033,0.626-0.097c0.232-0.064,0.4-0.121,0.506-0.17L14.271,18.307z\n        M14.137,7.429c-0.353,0.328-0.778,0.492-1.275,0.492c-0.496,0-0.924-0.164-1.28-0.492c-0.354-0.328-0.533-0.727-0.533-1.193\n        c0-0.465,0.18-0.865,0.533-1.196c0.356-0.332,0.784-0.497,1.28-0.497c0.497,0,0.923,0.165,1.275,0.497\n        c0.353,0.331,0.53,0.731,0.53,1.196C14.667,6.703,14.49,7.101,14.137,7.429z\"\n        />\n      </g>\n    </svg>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Button.css';\n\nexport default function Button(props) {\n  const { loading, ...rest } = props;\n  return (\n    <button {...rest}>\n      {[\n        loading ? (\n          <div className=\"la-ball-spin-clockwise la-sm\" key=\"la-first\">\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n          </div>\n        ) : null\n      ].concat(props.children)}\n    </button>\n  );\n}\n\nButton.propTypes = {\n  children: PropTypes.any,\n  loading: PropTypes.bool\n};\n","import { providers } from 'ethers';\n\nexport async function wrapEthersProvider(\n  web3Provider = null,\n  reportStatus = () => {}\n) {\n  if (!web3Provider) {\n    web3Provider = await getWeb3Provider(reportStatus);\n  }\n  return new providers.Web3Provider(web3Provider.currentProvider);\n}\n\nexport async function getWeb3Provider(reportStatus) {\n  // const timeout = setTimeout(\n  //   () =>\n  //     new Toast(\n  //       'Please, sign in with your crypto wallet',\n  //       Toast.TYPE_INFO,\n  //       Toast.TIME_LONG\n  //     ),\n  //   5000\n  // );\n\n  if (window.ethereum) {\n    window.web3 = new window.Web3(window.ethereum);\n    try {\n      reportStatus('Please, allow an access to this page in your wallet');\n      await window.ethereum.enable();\n    } catch (error) {\n      // clearTimeout(timeout);\n      throw new Error(\"You've denied the access to see your account address.\");\n    }\n  } else if (window.web3) {\n    window.web3 = new window.Web3(window.web3.currentProvider);\n  } else {\n    // clearTimeout(timeout);\n    return null;\n  }\n\n  // clearTimeout(timeout);\n\n  return window.web3;\n}\n","import React from 'react';\nimport { action, runInAction } from 'mobx';\nimport { observer } from 'mobx-react';\nimport './App.css';\nimport { state } from './state';\nimport TransferArrow from './components/TransferArrow';\nimport TokenLogo from './components/TokenLogo';\nimport WarningIcon from './components/WarningIcon';\nimport InfoIcon from './components/InfoIcon';\nimport Button from './components/Button';\nimport {\n  formatEthereumAddress,\n  formatTokenValue,\n  getBackEndContracts\n} from './utils';\nimport {\n  NETWORK_BY_CHAIN_ID,\n  UNKNOWN_NETWORK,\n  WARNING_UNKNOWN_NETWORK,\n  WARNING_WRONG_NETWORK,\n  WARNING_CUSTOM_MESSAGE,\n  WARNING_UNABLE_TO_CONNECT_WEB3\n} from './const';\nimport { getWeb3Provider, wrapEthersProvider } from './modules/ethereum';\n\nconst getContractNetworks = () =>\n  getBackEndContracts(state).map(b => NETWORK_BY_CHAIN_ID[b.networkChainId]);\nconst isCurrentNetworkTarget = () =>\n  state.selectedNetwork.chainId === state.targetNetwork.chainId;\nconst isButtonActive = () =>\n  !state.warningMessageReadOnly &&\n  state.approvedDelegationRequest &&\n  !state.delegationConfirmationRequestPending;\n\nclass App extends React.PureComponent {\n  state = {\n    tick: 0\n  };\n\n  accountUpdateTimeout = 1;\n  web3Provider = null;\n  tickerInterval = 0;\n\n  ticker = () => {\n    if (!state.approvedDelegationRequest) {\n      return;\n    }\n    this.setState({\n      tick: this.state.tick + 1\n    });\n  };\n\n  updateFromProvider = action(async () => {\n    if (!state.ethersProvider) {\n      // Displays default initWarningMessage\n      return;\n    }\n    const account = (await state.ethersProvider.listAccounts())[0];\n    let network;\n    // this.provider.getNetwork() always returns the same net, looks like a bug in Ethers.js. Using the native method\n    do {\n      // eslint-disable-next-line require-atomic-updates\n      network = await new Promise((res, rej) =>\n        this.web3Provider.version.getNetwork((e, r) => (e ? rej(e) : res(r)))\n      );\n      if (!NETWORK_BY_CHAIN_ID[network]) {\n        runInAction(\n          () => (state.networkWarningMessage = WARNING_UNKNOWN_NETWORK(network))\n        );\n        await new Promise(r => setTimeout(r, 5000));\n      }\n    } while (!NETWORK_BY_CHAIN_ID[network]);\n\n    runInAction(() => {\n      // Update account\n      if (state.currentEthereumAccount !== account) {\n        state.currentEthereumAccount = account;\n      }\n\n      // Update selected network\n      if (+network !== state.selectedNetwork.chainId) {\n        state.selectedNetwork = NETWORK_BY_CHAIN_ID[network] || UNKNOWN_NETWORK;\n      }\n\n      // Make Target Network a network which has the selected contract.\n      const contractsInOtherNetworks = getContractNetworks().filter(\n        net => net.chainId !== state.targetNetwork.chainId\n      );\n      if (\n        contractsInOtherNetworks.length &&\n        state.targetNetwork.chainId !== contractsInOtherNetworks[0].chainId\n      ) {\n        state.targetNetwork = contractsInOtherNetworks[0];\n      }\n\n      // Target network warning\n      if (!isCurrentNetworkTarget()) {\n        if (!state.networkWarningMessage) {\n          state.networkWarningMessage = WARNING_WRONG_NETWORK(\n            state.targetNetwork.name,\n            state.selectedNetwork.name\n          );\n        }\n      } else {\n        state.networkWarningMessage = null;\n      }\n    });\n\n    if (this.accountUpdateTimeout > 0) {\n      this.accountUpdateTimeout = setTimeout(this.updateFromProvider, 100); // Loop\n    }\n  });\n\n  componentDidMount = action(async () => {\n    this.tickerInterval = setInterval(this.ticker, 1000);\n    try {\n      this.web3Provider = await getWeb3Provider(message =>\n        runInAction(\n          () => (state.initWarningMessage = WARNING_CUSTOM_MESSAGE(message))\n        )\n      );\n      if (!this.web3Provider) {\n        // Show default initWarningMessage\n        return;\n      }\n      let provider = await wrapEthersProvider(this.web3Provider);\n      runInAction(() => {\n        state.initWarningMessage = null;\n        state.ethersProvider = provider;\n      });\n      await this.updateFromProvider();\n      console.log('Provider', provider);\n    } catch (e) {\n      runInAction(\n        () =>\n          (state.initWarningMessage = WARNING_UNABLE_TO_CONNECT_WEB3(\n            e.toString()\n          ))\n      );\n      console.error(e);\n    }\n  });\n\n  componentWillUnmount() {\n    clearTimeout(this.accountUpdateTimeout);\n    clearInterval(this.tickerInterval);\n    this.accountUpdateTimeout = 0;\n  }\n\n  actionButtonClick = action(async () => {\n    if (!isButtonActive()) {\n      return;\n    }\n    // There is a reaction on changing this prop which enables signing / back end request\n    runInAction(() => (state.delegationConfirmationRequestPending = true));\n  });\n\n  onRecipientChange = action(\n    ({ target: { value } }) =>\n      (state.functionArguments = [value, ...state.functionArguments.slice(1)])\n  );\n\n  render() {\n    const sender = formatEthereumAddress(state.currentEthereumAccount);\n    const {\n      contractAddress,\n      contractSymbolReadOnly,\n      functionArguments,\n      contractDecimalsReadOnly,\n      approvedDelegationRequest\n    } = state;\n    const recipient =\n      (functionArguments && functionArguments.length && functionArguments[0]) ||\n      '0x6f8103606b649522aF9687e8f1e7399eff8c4a6B';\n    const value = formatTokenValue(\n      (functionArguments && functionArguments.length && functionArguments[1]) ||\n        Math.pow(10, contractDecimalsReadOnly).toString(),\n      contractDecimalsReadOnly\n    );\n    const fee = formatTokenValue(\n      (approvedDelegationRequest && approvedDelegationRequest.fee) || 0,\n      contractDecimalsReadOnly\n    );\n    let warning = state.warningMessageReadOnly;\n    const isLoading =\n      !warning &&\n      (!state.approvedDelegationRequest ||\n        state.delegationConfirmationRequestPending);\n    const tzOffset = new Date().getTimezoneOffset() * 60 * 1000;\n    const nowUtc = Date.now() - tzOffset;\n    const expiresIn = !state.approvedDelegationRequest\n      ? ''\n      : new Date(\n          Math.max(\n            tzOffset,\n            new Date(state.approvedDelegationRequest.expiresAt).getTime() -\n              nowUtc\n          )\n        )\n          .toTimeString()\n          .replace(/\\s.*$/, '')\n          .replace(/^00:/, '');\n\n    return (\n      <div className=\"app\">\n        <section className=\"app-body\">\n          <h1 className=\"head-title\">Transfer</h1>\n          <div className=\"token-info\">\n            {value} <TokenLogo tokenAddress={contractAddress} />{' '}\n            {contractSymbolReadOnly}\n          </div>\n          <div className=\"sender-and-recipient-block\">\n            <div>\n              <div>\n                <input value={sender} disabled />\n              </div>\n              <div className=\"address-sub\">Sender (You)</div>\n            </div>\n            <TransferArrow />\n            <div>\n              <div>\n                <input\n                  value={recipient}\n                  onChange={this.onRecipientChange}\n                  disabled={state.fixed}\n                />\n                <div className=\"address-sub\">Recipient</div>\n              </div>\n            </div>\n          </div>\n          <div className=\"spec-table\">\n            <div className=\"spec-table-row\">\n              <div>Fee for Sender</div>\n              <div className=\"strong\">\n                {fee} <TokenLogo tokenAddress={contractAddress} />{' '}\n                {contractSymbolReadOnly}\n              </div>\n            </div>\n            {!state.approvedDelegationRequest ? null : (\n              <div className=\"spec-table-row\">\n                <div>Fee Expires In</div>\n                <div>{expiresIn}</div>\n              </div>\n            )}\n            <div className=\"spec-table-row\">\n              <div>Confirmation Time</div>\n              <div>~3 minutes</div>\n            </div>\n          </div>\n          {(warning || state.globalInfoMessage) && (\n            <div\n              className={\n                'warning-message' +\n                (!warning && state.globalInfoMessage ? ' info' : '')\n              }\n            >\n              {warning ? <WarningIcon /> : <InfoIcon />}{' '}\n              {warning || state.globalInfoMessage}\n            </div>\n          )}\n          {state.approvedDelegationResponse &&\n          state.approvedDelegationResponse.status === 'mined' ? null : (\n            <div className=\"center\">\n              <Button\n                className={(!isButtonActive() && 'unavailable') || ''}\n                loading={isLoading}\n                onClick={this.actionButtonClick}\n              >\n                {state.approvedDelegationResponse &&\n                (state.approvedDelegationResponse.status === 'new' ||\n                  state.approvedDelegationResponse.status === 'mining' ||\n                  state.approvedDelegationResponse.status === 'confirmed')\n                  ? 'Waiting'\n                  : 'Confirm'}\n              </Button>\n            </div>\n          )}\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}