{"version":3,"sources":["utils/http.js","const/ethereum.js","const/backends.js","const/apis.js","const/react-messages.js","utils/ethereum.js","state/state.js","state/reactions.js","state/init.js","components/TransferArrow/index.js","components/TokenLogo/index.js","components/WarningIcon/index.js","modules/ethereum/provider.js","App.js","serviceWorker.js","index.js"],"names":["httpRequest","url","a","method","data","undefined","Promise","resolve","reject","xhr","XMLHttpRequest","open","onload","readyState","status","JSON","parse","responseText","onerror","send","stringify","httpGet","httpPost","UNKNOWN_NETWORK","Object","freeze","chainId","name","NETWORK_BY_CHAIN_ID","1","ensAddress","3","2","4","5","42","61","62","DELEGATED_TX_BACK_ENDS","INFURA_PUBLIC_API_KEY","WARNING_NO_WEB3","target","rel","href","WARNING_WRONG_NETWORK","targetNetwork","currentNetwork","WARNING_UNKNOWN_NETWORK","network","WARNING_CUSTOM_MESSAGE","message","WARNING_WRONG_URL_PARAMETER","value","formatEthereumAddress","address","slice","ethCall","networkName","contractAddress","functionSignature","id","jsonrpc","params","utils","to","response","result","state","observable","globalWarningMessage","currentEthereumAccount","selectedNetwork","contractSymbolReadOnly","contractDecimalsReadOnly","functionName","functionArguments","backEndsMeta","backEndsByContractReadOnly","console","log","loadTokenMeta","action","all","symbol","decimals","runInAction","parseBytes32String","substr","parseInt","error","observe","window","location","search","values","find","net","test","backEndsReady","addBackEnds","backEnd","pop","push","contracts","Array","warn","contractBackEnd","concat","networkChainId","interval","setInterval","map","meta","clearInterval","TransferArrow","className","TokenLogo","props","tokenAddress","assetUrl","src","alt","WarningIcon","version","xmlns","x","y","width","height","viewBox","fill","d","wrapEthersProvider","web3Provider","reportStatus","getWeb3Provider","providers","Web3Provider","currentProvider","ethereum","web3","Web3","enable","Error","App","warningMessage","networkWarningMessage","accountUpdateTimeout","provider","updateFromProvider","listAccounts","account","res","rej","getNetwork","e","r","setState","setTimeout","currentAccount","b","this","toString","clearTimeout","sender","recipient","warning","targetNetworks","join","length","WARNING_SUPPORTED_CONTRACT_WRONG_NETWORK","from","Set","c","WARNING_CONTRACT_NOT_SUPPORTED","disabled","React","PureComponent","observer","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7af35047.chunk.js","sourcesContent":["async function httpRequest(url, method = 'GET', data = undefined) {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open(method, url, true);\n    xhr.onload = () => {\n      if (xhr.readyState === 4 && xhr.status >= 200 && xhr.status < 300) {\n        resolve(JSON.parse(xhr.responseText));\n      } else {\n        reject(xhr.responseText ? JSON.parse(xhr.responseText) : xhr.status);\n      }\n    };\n    xhr.onerror = reject;\n    xhr.send(data && JSON.stringify(data));\n  });\n}\n\nexport const httpGet = async url => httpRequest(url);\nexport const httpPost = async (url, data) => httpRequest(url, 'POST', data);\n","export const UNKNOWN_NETWORK = Object.freeze({\n  chainId: -1,\n  name: 'unknown-network'\n});\n\nexport const NETWORK_BY_CHAIN_ID = {\n  1: {\n    chainId: 1,\n    ensAddress: '0x314159265dd8dbb310642f98f50c066173c1259b',\n    name: 'homestead'\n  },\n  3: {\n    chainId: 3,\n    ensAddress: '0x112234455c3a32fd11230c42e7bccd4a84e02010',\n    name: 'ropsten'\n  },\n  2: {\n    chainId: 2,\n    name: 'morden'\n  },\n  4: {\n    chainId: 4,\n    ensAddress: '0xe7410170f87102DF0055eB195163A03B7F2Bff4A',\n    name: 'rinkeby'\n  },\n  5: {\n    chainId: 5,\n    ensAddress: '0x112234455c3a32fd11230c42e7bccd4a84e02010',\n    name: 'goerli'\n  },\n  42: {\n    chainId: 42,\n    name: 'kovan'\n  },\n  61: {\n    chainId: 61,\n    name: 'classic'\n  },\n  62: {\n    chainId: 62,\n    name: 'classicTestnet'\n  }\n};\n","// The widget will try to get metadata from all back ends listed here.\nexport const DELEGATED_TX_BACK_ENDS = ['http://localhost:8088'];\n","export const INFURA_PUBLIC_API_KEY = '26330e580e9d49ffb91482c15a92e86a';\n","import React from 'react';\nimport { formatEthereumAddress } from '../utils/ethereum';\n\nexport const WARNING_NO_WEB3 = (\n  <span>\n    In order to use this delegated transactions service, you need to browse this\n    page with{' '}\n    <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://metamask.io\">\n      Metamask wallet\n    </a>{' '}\n    extension or from your{' '}\n    <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://trustwallet.com\">\n      mobile wallet&apos;s\n    </a>{' '}\n    embedded DApp browser (if supported).\n  </span>\n);\n\nexport const WARNING_WRONG_NETWORK = (targetNetwork, currentNetwork) => (\n  <span>\n    Please, switch your wallet to{' '}\n    <strong>\n      {targetNetwork === 'homestead' ? 'mainnet' : targetNetwork} network\n    </strong>{' '}\n    (it is currently on {currentNetwork} network).\n  </span>\n);\n\nexport const WARNING_UNKNOWN_NETWORK = network => (\n  <span>\n    Unknown network selected in your wallet ({network}). Please, switch to main\n    network or known testnets (ropsten/kovan)\n  </span>\n);\n\nexport const WARNING_CUSTOM_MESSAGE = message => <span>{message}</span>;\n\nexport const WARNING_UNABLE_TO_CONNECT_WEB3 = message => (\n  <span>Unable to connect to your wallet. {message}</span>\n);\n\nexport const WARNING_WRONG_URL_PARAMETER = (name, value) => (\n  <span>\n    Configuration error: unknown or wrong URL parameter &quot;{name}\n    &quot;=&quot;{value}&quot;.\n  </span>\n);\n\nexport const WARNING_CONTRACT_NOT_SUPPORTED = contractAddress => (\n  <span>\n    There is no back end for contract {formatEthereumAddress(contractAddress)}{' '}\n    found which supports delegated transactions. If this contract indeed\n    supports delegated transactions, you may add it by contributing to{' '}\n    <a\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      href=\"https://github.com/ZitRos/ethereum-delegated-tx-widget\"\n    >\n      this project\n    </a>\n    .\n  </span>\n);\n\nexport const WARNING_SUPPORTED_CONTRACT_WRONG_NETWORK = (\n  currentNetwork,\n  targetNetworks = []\n) => (\n  <span>\n    Configured back ends support only{' '}\n    <strong>\n      {targetNetworks\n        .map(targetNetwork =>\n          targetNetwork === 'homestead' ? 'mainnet' : targetNetwork\n        )\n        .join(' or ')}\n    </strong>{' '}\n    network{targetNetworks.length > 1 ? 's' : ''} for this contract. Please,{' '}\n    switch your wallet to {targetNetworks.length > 1 ? 'these' : 'this'} network\n    {targetNetworks.length > 1 ? 's' : ''} (it is currently on {currentNetwork}{' '}\n    network).\n  </span>\n);\n","import { utils } from 'ethers';\nimport { httpPost } from './http';\nimport { INFURA_PUBLIC_API_KEY } from '../const';\n\nexport function formatEthereumAddress(address) {\n  if (!address) {\n    return '0x????..????';\n  }\n  return address.slice(0, 6) + '..' + address.slice(-4);\n}\n\nexport function isValidEthereumAddress(address) {\n  return typeof address === 'string' && /0x[0-9a-f]{40}/i.test(address);\n}\n\nexport async function ethCall(networkName, contractAddress, functionSignature) {\n  const response = await httpPost(\n    `https://${networkName}.infura.io/v3/${INFURA_PUBLIC_API_KEY}`,\n    {\n      id: 42,\n      jsonrpc: '2.0',\n      method: 'eth_call',\n      params: [\n        {\n          data:\n            utils.id(functionSignature).slice(0, 10) +\n            '00000000000000000000000000000000000000000000000000000000',\n          to: contractAddress\n        },\n        'latest'\n      ]\n    }\n  );\n  return response.result;\n}\n","import { observable } from 'mobx';\nimport { UNKNOWN_NETWORK, NETWORK_BY_CHAIN_ID } from '../const';\n\nconst state = observable({\n  globalWarningMessage: null, // React component displayed on top of all other warnings if set\n\n  currentEthereumAccount: '',\n  targetNetwork: NETWORK_BY_CHAIN_ID[1], // Default to mainnet\n  selectedNetwork: UNKNOWN_NETWORK, // Network currently selected by user\n\n  contractAddress: '0x82f4ded9cec9b5750fbff5c2185aee35afc16587',\n  contractSymbolReadOnly: 'DREAM', // Updates automatically once `contractAddress` changes\n  contractDecimalsReadOnly: 6, // Updates automatically once `contractAddress` changes\n  functionName: 'transfer',\n  functionArguments: ['0xB3311c91d7c1B305DA3567C2320B716B13F24F8A', '9990000'],\n\n  backEndsMeta: [], // Metadata of all back ends collected from root endpoint. See ./init\n  backEndsByContractReadOnly: {} // Map contract => [back end 1, back end 2, ...]. Computed within backEndsMeta\n});\n\nconsole.log('state', state);\n\nexport default state;\n","import { observe, action, runInAction } from 'mobx';\nimport { utils } from 'ethers';\nimport { ethCall } from '../utils';\nimport state from './state';\n\nconst loadTokenMeta = action(async () => {\n  const networkName =\n    state.targetNetwork.name === 'homestead'\n      ? 'mainnet'\n      : state.targetNetwork.name;\n  try {\n    const [symbol, decimals] = await Promise.all([\n      ethCall(networkName, state.contractAddress, 'symbol()'),\n      ethCall(networkName, state.contractAddress, 'decimals()')\n    ]);\n    runInAction(() => {\n      state.contractSymbolReadOnly = utils.parseBytes32String(\n        '0x' + symbol.substr(64 * 2 + 2, 64 * 2 + 2 + 64)\n      );\n      state.contractDecimalsReadOnly = parseInt(decimals);\n    });\n  } catch (e) {\n    runInAction(() => {\n      state.contractSymbolReadOnly = 'Tokens';\n      state.contractDecimalsReadOnly = 18;\n    });\n    console.error('Unable to determine token symbol', e);\n  }\n});\n\nobserve(state, 'contractAddress', loadTokenMeta); // Todo: kovan token meta\n","import state from './state';\nimport { action, runInAction } from 'mobx';\nimport { parse } from 'qs';\nimport {\n  DELEGATED_TX_BACK_ENDS,\n  NETWORK_BY_CHAIN_ID,\n  UNKNOWN_NETWORK,\n  WARNING_WRONG_URL_PARAMETER\n} from '../const';\nimport { httpGet, isValidEthereumAddress } from '../utils';\n\nconst url = parse(window.location.search.slice(1));\n\n/// Sync actions:\n/// - Parse URL components\n/// - Determine target network\naction(() => {\n  if (url.network) {\n    if (url.network === 'mainnet') {\n      url.network = 'homestead';\n    }\n    if (parseInt(url.network) === +url.network) {\n      state.targetNetwork = NETWORK_BY_CHAIN_ID[url.network];\n    } else {\n      state.targetNetwork = Object.values(NETWORK_BY_CHAIN_ID).find(\n        net => net.name === url.network\n      );\n    }\n    // If bad network configured\n    if (!state.targetNetwork) {\n      state.targetNetwork = UNKNOWN_NETWORK;\n      state.globalWarningMessage = WARNING_WRONG_URL_PARAMETER(\n        'network',\n        url.network\n      );\n    }\n  }\n  // Keep below network\n  if (url.contractAddress) {\n    if (isValidEthereumAddress(url.contractAddress)) {\n      state.contractAddress = url.contractAddress;\n    } else {\n      state.globalWarningMessage = WARNING_WRONG_URL_PARAMETER(\n        'contractAddress',\n        url.contractAddress\n      );\n    }\n  }\n})();\n\n/// Fetch back ends metadata\n// Because querying back ends can take up to 30 seconds, this function throttles the responses\n// and adds them to the state once they are ready.\naction(async () => {\n  const backEndsReady = [];\n  const addBackEnds = () => {\n    runInAction(() => {\n      let backEnd, url;\n      while (([backEnd, url] = backEndsReady.pop() || []) && backEnd) {\n        state.backEndsMeta.push(backEnd);\n        if (!backEnd.contracts || !(backEnd.contracts instanceof Array)) {\n          console.warn(\n            `Back end endpoint GET ${url} does not provide contracts[]`\n          );\n        }\n        for (const contractBackEnd of backEnd.contracts || []) {\n          state.backEndsByContractReadOnly = {\n            ...state.backEndsByContractReadOnly,\n            [contractBackEnd.address]: (\n              state.backEndsByContractReadOnly[contractBackEnd.address] || []\n            ).concat({\n              ...contractBackEnd,\n              url,\n              networkChainId: backEnd.networkChainId,\n              networkName: backEnd.networkName\n            })\n          };\n        }\n      }\n    });\n  };\n  const interval = setInterval(addBackEnds, 250);\n  await Promise.all(\n    DELEGATED_TX_BACK_ENDS.map(async url => {\n      try {\n        const meta = await httpGet(url);\n        backEndsReady.push([meta, url]);\n      } catch (e) {\n        console.error(`Back end ${url} responds with error.`, e);\n      }\n    })\n  );\n  // Clear the interval once all back ends are loaded\n  clearInterval(interval);\n  addBackEnds();\n})();\n","import React from 'react';\nimport './TransferArrow.css';\n\nexport default function TransferArrow() {\n  return (\n    <div className=\"round\">\n      <div className=\"cta\">\n        <span className=\"arrow arr1 next\"></span>\n        <span className=\"arrow arr2 next\"></span>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TokenLogo.css';\n\nexport default function TokenLogo(props) {\n  const tokenAddress =\n    props.tokenAddress || '0x82f4ded9cec9b5750fbff5c2185aee35afc16587';\n  const assetUrl = `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/${tokenAddress}/logo.png`;\n  return <img className=\"token-logo-img\" src={assetUrl} alt=\"\" />;\n}\n\nTokenLogo.propTypes = {\n  tokenAddress: PropTypes.string\n};\n","import React from 'react';\nimport './WarningIcon.css';\n\nexport default function WarningIcon() {\n  return (\n    <svg\n      version=\"1.1\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      x=\"0px\"\n      y=\"0px\"\n      width=\"16px\"\n      height=\"16px\"\n      viewBox=\"0 0 554.2 554.199\"\n      className=\"warning-icon\"\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M538.5,386.199L356.5,70.8c-16.4-28.4-46.7-45.9-79.501-45.9c-32.8,0-63.1,17.5-79.5,45.9L12.3,391.6\n        c-16.4,28.4-16.4,63.4,0,91.8C28.7,511.8,59,529.3,91.8,529.3H462.2c0.101,0,0.2,0,0.2,0c50.7,0,91.8-41.101,91.8-91.8\n        C554.2,418.5,548.4,400.8,538.5,386.199z M316.3,416.899c0,21.7-16.7,38.3-39.2,38.3s-39.2-16.6-39.2-38.3V416\n        c0-21.601,16.7-38.301,39.2-38.301S316.3,394.3,316.3,416V416.899z M317.2,158.7L297.8,328.1c-1.3,12.2-9.4,19.8-20.7,19.8\n        s-19.4-7.7-20.7-19.8L237,158.6c-1.3-13.1,5.801-23,18-23H299.1C311.3,135.7,318.5,145.6,317.2,158.7z\"\n      />\n    </svg>\n  );\n}\n","import { providers } from 'ethers';\n\nexport async function wrapEthersProvider(\n  web3Provider = null,\n  reportStatus = () => {}\n) {\n  if (!web3Provider) {\n    web3Provider = await getWeb3Provider(reportStatus);\n  }\n  return new providers.Web3Provider(web3Provider.currentProvider);\n}\n\nexport async function getWeb3Provider(reportStatus) {\n  // const timeout = setTimeout(\n  //   () =>\n  //     new Toast(\n  //       'Please, sign in with your crypto wallet',\n  //       Toast.TYPE_INFO,\n  //       Toast.TIME_LONG\n  //     ),\n  //   5000\n  // );\n\n  if (window.ethereum) {\n    window.web3 = new window.Web3(window.ethereum);\n    try {\n      reportStatus('Please, allow an access to this page in your wallet');\n      await window.ethereum.enable();\n    } catch (error) {\n      // clearTimeout(timeout);\n      throw new Error(\"You've denied the access to see your account address.\");\n    }\n  } else if (window.web3) {\n    window.web3 = new window.Web3(window.web3.currentProvider);\n  } else {\n    // clearTimeout(timeout);\n    return null;\n  }\n\n  // clearTimeout(timeout);\n\n  return window.web3;\n}\n","import React from 'react';\nimport { action, runInAction } from 'mobx';\nimport { observer } from 'mobx-react';\nimport './App.css';\nimport { state } from './state';\nimport TransferArrow from './components/TransferArrow';\nimport TokenLogo from './components/TokenLogo';\nimport WarningIcon from './components/WarningIcon';\nimport { formatEthereumAddress } from './utils';\nimport {\n  NETWORK_BY_CHAIN_ID,\n  UNKNOWN_NETWORK,\n  WARNING_NO_WEB3,\n  WARNING_UNKNOWN_NETWORK,\n  WARNING_WRONG_NETWORK,\n  WARNING_CUSTOM_MESSAGE,\n  WARNING_UNABLE_TO_CONNECT_WEB3,\n  WARNING_CONTRACT_NOT_SUPPORTED,\n  WARNING_SUPPORTED_CONTRACT_WRONG_NETWORK\n} from './const';\nimport { getWeb3Provider, wrapEthersProvider } from './modules/ethereum';\n\nclass App extends React.PureComponent {\n  state = {\n    warningMessage: WARNING_NO_WEB3,\n    networkWarningMessage: null\n  };\n\n  accountUpdateTimeout = 1;\n  provider = null;\n  web3Provider = null;\n\n  updateFromProvider = action(async () => {\n    if (!this.provider) {\n      return;\n    }\n    const account = (await this.provider.listAccounts())[0];\n    let network;\n    // this.provider.getNetwork() always returns the same net, looks like a bug in Ethers.js. Using the native method\n    do {\n      // eslint-disable-next-line require-atomic-updates\n      network = await new Promise((res, rej) =>\n        this.web3Provider.version.getNetwork((e, r) => (e ? rej(e) : res(r)))\n      );\n      if (!NETWORK_BY_CHAIN_ID[network]) {\n        this.setState({\n          networkWarningMessage: WARNING_UNKNOWN_NETWORK(network)\n        });\n        await new Promise(r => setTimeout(r, 5000));\n      }\n    } while (!NETWORK_BY_CHAIN_ID[network]);\n\n    runInAction(() => {\n      if (state.currentAccount !== account) {\n        state.currentAccount = account;\n      }\n      if (+network !== state.selectedNetwork.chainId) {\n        state.selectedNetwork = NETWORK_BY_CHAIN_ID[network] || UNKNOWN_NETWORK;\n      }\n    });\n\n    this.setState({\n      networkWarningMessage:\n        state.selectedNetwork.chainId !== state.targetNetwork.chainId &&\n        !(\n          state.backEndsByContractReadOnly[state.contractAddress] &&\n          state.backEndsByContractReadOnly[state.contractAddress].find(\n            b => b.networkChainId === state.selectedNetwork.chainId\n          )\n        )\n          ? WARNING_WRONG_NETWORK(\n              state.targetNetwork.name,\n              state.selectedNetwork.name\n            )\n          : null\n    });\n\n    if (this.accountUpdateTimeout > 0) {\n      this.accountUpdateTimeout = setTimeout(this.updateFromProvider, 100); // Loop\n    }\n  });\n\n  async componentDidMount() {\n    try {\n      this.web3Provider = await getWeb3Provider(message =>\n        this.setState({\n          warningMessage: WARNING_CUSTOM_MESSAGE(message)\n        })\n      );\n      if (!this.web3Provider) {\n        // Show default warning message\n        return;\n      }\n      this.provider = await wrapEthersProvider(this.web3Provider);\n      await this.updateFromProvider();\n      this.setState({\n        warningMessage: null\n      });\n      console.log('Provider', this.provider);\n    } catch (e) {\n      this.setState({\n        warningMessage: WARNING_UNABLE_TO_CONNECT_WEB3(e.toString())\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.accountUpdateTimeout);\n    this.accountUpdateTimeout = 0;\n  }\n\n  render() {\n    const sender = formatEthereumAddress(state.currentAccount);\n    const {\n      contractAddress,\n      contractSymbolReadOnly,\n      backEndsByContractReadOnly,\n      selectedNetwork\n    } = state;\n    const recipient = formatEthereumAddress(\n      '0x6f8103606b649522aF9687e8f1e7399eff8c4a6B'\n    );\n    const value = 5;\n    const fee = 2.1516;\n    let { warningMessage, networkWarningMessage } = this.state;\n    let warning =\n      warningMessage || networkWarningMessage || state.globalWarningMessage;\n\n    if (!backEndsByContractReadOnly[contractAddress]) {\n      warning = warning || WARNING_CONTRACT_NOT_SUPPORTED(contractAddress);\n    } else if (\n      !backEndsByContractReadOnly[contractAddress].find(\n        b => b.networkChainId === selectedNetwork.chainId\n      )\n    ) {\n      warning =\n        warning ||\n        WARNING_SUPPORTED_CONTRACT_WRONG_NETWORK(\n          selectedNetwork.name,\n          Array.from(\n            new Set(\n              backEndsByContractReadOnly[contractAddress].map(\n                c => c.networkName\n              )\n            )\n          )\n        );\n    }\n    // Parse backEndsMeta and determine:\n    // - contract\n    // - network\n    // - etc\n\n    return (\n      <div className=\"app\">\n        <section className=\"app-body\">\n          <h1 className=\"head-title\">Transfer</h1>\n          {/* <div className=\"head-subtitle\">Delegated token transaction</div> */}\n          <div className=\"token-info\">\n            {value} <TokenLogo tokenAddress={contractAddress} />{' '}\n            {contractSymbolReadOnly}\n          </div>\n          <div className=\"sender-and-recipient-block\">\n            <div>\n              <div>\n                <input value={sender} disabled />\n              </div>\n              <div className=\"address-sub\">Sender (You)</div>\n            </div>\n            <TransferArrow />\n            <div>\n              <div>\n                <input value={recipient} disabled />\n              </div>\n              <div className=\"address-sub\">Recipient</div>\n            </div>\n          </div>\n          <div className=\"spec-table\">\n            <div className=\"spec-table-row\">\n              <div>Fee for Sender</div>\n              <div className=\"strong\">\n                {fee} <TokenLogo tokenAddress={contractAddress} />{' '}\n                {contractSymbolReadOnly}\n              </div>\n            </div>\n            <div className=\"spec-table-row\">\n              <div>Confirmation Time</div>\n              <div>~3 minutes</div>\n            </div>\n          </div>\n          {warning && (\n            <div className=\"warning-message\">\n              <WarningIcon /> {warning}\n            </div>\n          )}\n          <div className=\"center\">\n            <button className={warning ? 'unavailable' : ''}>Confirm</button>\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}