{"version":3,"sources":["state.js","components/TransferArrow/index.js","components/TokenLogo/index.js","components/WarningIcon/index.js","utils/ethereum.js","const/ethereum.js","modules/ethereum/provider.js","App.js","serviceWorker.js","index.js"],"names":["unknownNetwork","Object","freeze","chainId","name","state","observable","currentEthereumAccount","currentNetwork","TransferArrow","className","TokenLogo","props","tokenAddress","assetUrl","src","alt","WarningIcon","version","xmlns","x","y","width","height","viewBox","fill","d","formatEthereumAddress","address","slice","NETWORK_BY_CHAIN_ID","1","ensAddress","3","2","4","5","42","61","62","getProvider","a","web3Provider","reportStatus","getWeb3Provider","providers","Web3Provider","currentProvider","window","ethereum","web3","Web3","enable","Error","App","warningMessage","target","rel","href","accountUpdateTimeout","provider","updateFromProvider","action","listAccounts","account","Promise","res","rej","getNetwork","e","r","network","setState","setTimeout","currentAccount","message","this","console","log","toString","clearTimeout","sender","recipient","value","disabled","React","PureComponent","observer","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.42538a46.chunk.js","sourcesContent":["import { observable } from 'mobx';\n\nexport const unknownNetwork = Object.freeze({\n  chainId: -1,\n  name: 'unknown-network'\n});\n\nconst state = observable({\n  currentEthereumAccount: '',\n  currentNetwork: unknownNetwork\n});\n\nexport default state;\n","import React from 'react';\nimport './TransferArrow.css';\n\nexport default function TransferArrow() {\n  return (\n    <div className=\"round\">\n      <div className=\"cta\">\n        <span className=\"arrow arr1 next\"></span>\n        <span className=\"arrow arr2 next\"></span>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TokenLogo.css';\n\nexport default function TokenLogo(props) {\n  const tokenAddress =\n    props.tokenAddress || '0x82f4ded9cec9b5750fbff5c2185aee35afc16587';\n  const assetUrl = `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/${tokenAddress}/logo.png`;\n  return <img className=\"token-logo-img\" src={assetUrl} alt=\"\" />;\n}\n\nTokenLogo.propTypes = {\n  tokenAddress: PropTypes.string\n};\n","import React from 'react';\nimport './WarningIcon.css';\n\nexport default function WarningIcon() {\n  return (\n    <svg\n      version=\"1.1\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      x=\"0px\"\n      y=\"0px\"\n      width=\"16px\"\n      height=\"16px\"\n      viewBox=\"0 0 554.2 554.199\"\n      className=\"warning-icon\"\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M538.5,386.199L356.5,70.8c-16.4-28.4-46.7-45.9-79.501-45.9c-32.8,0-63.1,17.5-79.5,45.9L12.3,391.6\n        c-16.4,28.4-16.4,63.4,0,91.8C28.7,511.8,59,529.3,91.8,529.3H462.2c0.101,0,0.2,0,0.2,0c50.7,0,91.8-41.101,91.8-91.8\n        C554.2,418.5,548.4,400.8,538.5,386.199z M316.3,416.899c0,21.7-16.7,38.3-39.2,38.3s-39.2-16.6-39.2-38.3V416\n        c0-21.601,16.7-38.301,39.2-38.301S316.3,394.3,316.3,416V416.899z M317.2,158.7L297.8,328.1c-1.3,12.2-9.4,19.8-20.7,19.8\n        s-19.4-7.7-20.7-19.8L237,158.6c-1.3-13.1,5.801-23,18-23H299.1C311.3,135.7,318.5,145.6,317.2,158.7z\"\n      />\n    </svg>\n  );\n}\n","export function formatEthereumAddress(address) {\n  if (!address) {\n    return '0x????..????';\n  }\n  return address.slice(0, 6) + '..' + address.slice(-4);\n}\n","export const NETWORK_BY_CHAIN_ID = {\n  1: {\n    chainId: 1,\n    ensAddress: '0x314159265dd8dbb310642f98f50c066173c1259b',\n    name: 'homestead'\n  },\n  3: {\n    chainId: 3,\n    ensAddress: '0x112234455c3a32fd11230c42e7bccd4a84e02010',\n    name: 'ropsten'\n  },\n  2: {\n    chainId: 2,\n    name: 'morden'\n  },\n  4: {\n    chainId: 4,\n    ensAddress: '0xe7410170f87102DF0055eB195163A03B7F2Bff4A',\n    name: 'rinkeby'\n  },\n  5: {\n    chainId: 5,\n    ensAddress: '0x112234455c3a32fd11230c42e7bccd4a84e02010',\n    name: 'goerli'\n  },\n  42: {\n    chainId: 42,\n    name: 'kovan'\n  },\n  61: {\n    chainId: 61,\n    name: 'classic'\n  },\n  62: {\n    chainId: 62,\n    name: 'classicTestnet'\n  }\n};\n","import { providers } from 'ethers';\n\nexport async function getProvider(\n  web3Provider = null,\n  reportStatus = () => {}\n) {\n  if (!web3Provider) {\n    web3Provider = await getWeb3Provider(reportStatus);\n  }\n  return new providers.Web3Provider(web3Provider.currentProvider);\n}\n\nexport async function getWeb3Provider(reportStatus) {\n  // const timeout = setTimeout(\n  //   () =>\n  //     new Toast(\n  //       'Please, sign in with your crypto wallet',\n  //       Toast.TYPE_INFO,\n  //       Toast.TIME_LONG\n  //     ),\n  //   5000\n  // );\n\n  if (window.ethereum) {\n    window.web3 = new window.Web3(window.ethereum);\n    try {\n      reportStatus('Please, allow an access to this page in your wallet');\n      await window.ethereum.enable();\n    } catch (error) {\n      // clearTimeout(timeout);\n      throw new Error(\"You've denied the access to see your account address.\");\n    }\n  } else if (window.web3) {\n    window.web3 = new window.Web3(window.web3.currentProvider);\n  } else {\n    // clearTimeout(timeout);\n    return null;\n  }\n\n  // clearTimeout(timeout);\n\n  return window.web3;\n}\n","import React from 'react';\nimport { action } from 'mobx';\nimport { observer } from 'mobx-react';\nimport './App.css';\nimport state, { unknownNetwork } from './state';\nimport TransferArrow from './components/TransferArrow';\nimport TokenLogo from './components/TokenLogo';\nimport WarningIcon from './components/WarningIcon';\nimport { formatEthereumAddress } from './utils';\nimport { NETWORK_BY_CHAIN_ID } from './const';\nimport { getWeb3Provider, getProvider } from './modules/ethereum';\n\nclass App extends React.PureComponent {\n  state = {\n    warningMessage: (\n      <span>\n        In order to use this delegated transactions service, you need to browse\n        this page with{' '}\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://metamask.io\">\n          Metamask wallet\n        </a>{' '}\n        extension or from your{' '}\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://trustwallet.com\"\n        >\n          mobile wallet&apos;s\n        </a>{' '}\n        embedded DApp browser (if supported).\n      </span>\n    )\n  };\n\n  accountUpdateTimeout = 1;\n  provider = null;\n  web3Provider = null;\n\n  updateFromProvider = action(async () => {\n    if (!this.provider) {\n      return;\n    }\n    const account = (await this.provider.listAccounts())[0];\n    let network;\n    // this.provider.getNetwork() always returns the same net, looks like a bug in Ethers.js. Using the native method\n    do {\n      network = await new Promise((res, rej) =>\n        this.web3Provider.version.getNetwork((e, r) => (e ? rej(e) : res(r)))\n      );\n      if (!NETWORK_BY_CHAIN_ID[network]) {\n        this.setState({\n          warningMessage: (\n            <span>\n              Unknown network selected in your wallet. Please, switch to main\n              network or known testnets (ropsten/kovan)\n            </span>\n          )\n        });\n        await new Promise(r => setTimeout(r, 5000));\n      }\n    } while (!NETWORK_BY_CHAIN_ID[network]);\n\n    if (state.currentAccount !== account) {\n      state.currentAccount = account;\n    }\n    if (+network !== state.currentNetwork.chainId) {\n      state.currentNetwork = NETWORK_BY_CHAIN_ID[network] || unknownNetwork;\n    }\n\n    if (this.accountUpdateTimeout > 0) {\n      this.accountUpdateTimeout = setTimeout(this.updateFromProvider, 100); // Loop\n    }\n  });\n\n  async componentDidMount() {\n    try {\n      this.web3Provider = await getWeb3Provider(message =>\n        this.setState({\n          warningMessage: <span>{message}</span>\n        })\n      );\n      if (!this.web3Provider) {\n        // Show default warning message\n        return;\n      }\n      this.provider = await getProvider(this.web3Provider);\n      await this.updateFromProvider();\n      this.setState({\n        warningMessage: null\n      });\n      console.log('Provider', this.provider);\n    } catch (e) {\n      this.setState({\n        warningMessage: (\n          <span>Unable to connect to your wallet. {e.toString()}</span>\n        )\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.accountUpdateTimeout);\n    this.accountUpdateTimeout = 0;\n  }\n\n  render() {\n    const sender = formatEthereumAddress(state.currentAccount);\n    const recipient = formatEthereumAddress(\n      '0x6f8103606b649522aF9687e8f1e7399eff8c4a6B'\n    );\n    const value = 5;\n    const fee = 2.1516;\n    return (\n      <div className=\"app\">\n        <section className=\"app-body\">\n          <h1 className=\"head-title\">Transfer</h1>\n          {/* <div className=\"head-subtitle\">Delegated token transaction</div> */}\n          <div className=\"token-info\">\n            {value} <TokenLogo /> DREAM\n          </div>\n          <div className=\"sender-and-recipient-block\">\n            <div>\n              <div>\n                <input value={sender} disabled />\n              </div>\n              <div className=\"address-sub\">Sender (You)</div>\n            </div>\n            <TransferArrow />\n            <div>\n              <div>\n                <input value={recipient} disabled />\n              </div>\n              <div className=\"address-sub\">Recipient</div>\n            </div>\n          </div>\n          <div className=\"spec-table\">\n            <div className=\"spec-table-row\">\n              <div>Fee for Sender</div>\n              <div className=\"strong\">\n                {fee} <TokenLogo /> DREAM\n              </div>\n            </div>\n            <div className=\"spec-table-row\">\n              <div>Confirmation Time</div>\n              <div>~3 minutes</div>\n            </div>\n          </div>\n          {this.state.warningMessage && (\n            <div className=\"warning-message\">\n              <WarningIcon /> {this.state.warningMessage}\n            </div>\n          )}\n          <div className=\"center\">\n            <button className={this.state.warningMessage ? 'unavailable' : ''}>\n              Confirm\n            </button>\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default observer(App);\n\n// function App() {\n\n//   const [currentAccount, setCurrentAccount] = useState(\"\");\n//   const [warningMessage, setWarningMessage] = useState();\n//   const [currentNetwork, setCurrentNetwork] = useState(unknownNetwork);\n\n//   const updateFromProvider = useCallback(async () => {\n//     if (!provider) {\n//       return;\n//     }\n//     const account = (await provider.listAccounts())[0];\n//     if (currentAccount != account) {\n//       setCurrentAccount(account);\n//     }\n//     let network;\n//     // this.provider.getNetwork() always returns the same net, looks like a bug in Ethers.js. Using the native method\n//     do {\n//       network = await new Promise((res, rej) => web3Provider.version.getNetwork((e, r) => e ? rej(e) : res(r)));\n//       if (!ethNetworksByChainId[network]) {\n//         setWarningMessage(<span>\n//           Unknown network selected in your wallet. Please, switch to main network or known testnets (ropsten/kovan)\n//         </span>);\n//         await new Promise(r => setTimeout(r, 3000));\n//       }\n//     } while (!ethNetworksByChainId[network]);\n//     if (+network != currentNetwork.chainId) {\n//       setCurrentNetwork(ethNetworksByChainId[network] || unknownNetwork);\n//     }\n//   }, [currentAccount, currentNetwork]);\n\n//     accountUpdateTimeout = 0;\n// }\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}