{"version":3,"sources":["components/TransferArrow/index.js","components/TokenLogo/index.js","components/WarningIcon/index.js","utils/ethereum.js","App.js","serviceWorker.js","index.js"],"names":["TransferArrow","className","TokenLogo","props","tokenAddress","assetUrl","src","alt","WarningIcon","version","xmlns","x","y","width","height","viewBox","fill","d","formatEthereumAddress","address","slice","App","sender","recipient","warningMessage","value","disabled","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iVAGe,SAASA,IAEtB,OACE,yBAAKC,UAAU,SACb,yBAAKA,UAAU,OACX,0BAAMA,UAAU,oBAChB,0BAAMA,UAAU,sB,MCNX,SAASC,EAAWC,GACjC,IAAMC,EAAeD,EAAMC,cAAgB,6CACrCC,EAAQ,kGAA+FD,EAA/F,aACd,OACE,yBAAKH,UAAU,iBACVK,IAAMD,EACNE,IAAI,K,MCNE,SAASC,IACtB,OACE,yBAAKC,QAAQ,MACRC,MAAM,6BACNC,EAAE,MACFC,EAAE,MACFC,MAAM,OACNC,OAAO,OACPC,QAAQ,oBACRd,UAAU,gBACb,0BAAMe,KAAK,eAAeC,EAAE,+hBCb3B,SAASC,EAAuBC,GACrC,OAAOA,EAAQC,MAAM,EAAE,GAAK,KAAOD,EAAQC,OAAO,GC6DrCC,MAvDf,WACE,IAAMC,EAASJ,EAAsB,8CAC/BK,EAAYL,EAAsB,8CAGlCM,EAAiB,sEAA6CF,EAA7C,SAA6D,EAA7D,sBAAqFG,OAArF,0DAEvB,OACE,yBAAKxB,UAAU,OACb,6BAASA,UAAU,YACjB,wBAAIA,UAAU,cAAd,YAEA,yBAAKA,UAAU,cATP,EASR,IACY,kBAAC,EAAD,MADZ,UAGA,yBAAKA,UAAU,8BACb,6BACE,6BACE,2BAAOwB,MAAQH,EAASI,UAAQ,KAElC,yBAAKzB,UAAU,eAAf,iBAIF,kBAAC,EAAD,MACA,6BACE,6BACE,2BAAOwB,MAAQF,EAAYG,UAAQ,KAErC,yBAAKzB,UAAU,eAAf,eAKJ,yBAAKA,UAAU,cACb,yBAAKA,UAAU,kBACb,+CACA,yBAAKA,UAAU,UAjCb,OAiCF,IAAgC,kBAAC,EAAD,MAAhC,WAEF,yBAAKA,UAAU,kBACb,kDACA,6CAGFuB,GAAkB,yBAAKvB,UAAU,mBACjC,kBAAC,EAAD,MADkB,IACAuB,GAEpB,yBAAKvB,UAAU,UACb,4BAAQA,UAAYuB,EAAiB,cAAgB,IAArD,eC3CUG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.35a6caaa.chunk.js","sourcesContent":["import React from 'react';\nimport './TransferArrow.css';\n\nexport default function TransferArrow () {\n  \n  return (\n    <div className=\"round\">\n      <div className=\"cta\">\n          <span className=\"arrow arr1 next\"></span>\n          <span className=\"arrow arr2 next\"></span>\n      </div>\n    </div>\n  );\n\n}\n","import React from 'react';\nimport \"./TokenLogo.css\";\n\nexport default function TokenLogo (props) {\n  const tokenAddress = props.tokenAddress || \"0x82f4ded9cec9b5750fbff5c2185aee35afc16587\";\n  const assetUrl = `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/${ tokenAddress }/logo.png`;\n  return (\n    <img className=\"token-logo-img\"\n         src={ assetUrl }\n         alt=\"\"/>\n  )\n}","import React from 'react';\nimport './WarningIcon.css';\n\nexport default function WarningIcon () {\n  return (\n    <svg version=\"1.1\"\n         xmlns=\"http://www.w3.org/2000/svg\"\n         x=\"0px\"\n         y=\"0px\"\n         width=\"16px\"\n         height=\"16px\"\n         viewBox=\"0 0 554.2 554.199\"\n         className=\"warning-icon\">\n      <path fill=\"currentColor\" d=\"M538.5,386.199L356.5,70.8c-16.4-28.4-46.7-45.9-79.501-45.9c-32.8,0-63.1,17.5-79.5,45.9L12.3,391.6\n        c-16.4,28.4-16.4,63.4,0,91.8C28.7,511.8,59,529.3,91.8,529.3H462.2c0.101,0,0.2,0,0.2,0c50.7,0,91.8-41.101,91.8-91.8\n        C554.2,418.5,548.4,400.8,538.5,386.199z M316.3,416.899c0,21.7-16.7,38.3-39.2,38.3s-39.2-16.6-39.2-38.3V416\n        c0-21.601,16.7-38.301,39.2-38.301S316.3,394.3,316.3,416V416.899z M317.2,158.7L297.8,328.1c-1.3,12.2-9.4,19.8-20.7,19.8\n        s-19.4-7.7-20.7-19.8L237,158.6c-1.3-13.1,5.801-23,18-23H299.1C311.3,135.7,318.5,145.6,317.2,158.7z\"/>\n    </svg>\n  );\n}","export function formatEthereumAddress (address) {\n  return address.slice(0,6) + \"..\" + address.slice(-4);\n}","import React from 'react';\nimport './App.css';\nimport TransferArrow from './components/TransferArrow';\nimport TokenLogo from './components/TokenLogo';\nimport WarningIcon from './components/WarningIcon';\nimport { formatEthereumAddress } from './utils';\n\nfunction App () {\n  const sender = formatEthereumAddress(\"0x6f8103606b649522aF9687e8f1e7399eff8c4a6B\");\n  const recipient = formatEthereumAddress(\"0x6f8103606b649522aF9687e8f1e7399eff8c4a6B\");\n  const value = 5;\n  const fee = 2.1516;\n  const warningMessage = <span>Insufficient funds. Sender's account { sender } have { 0 } DREAM tokens, but { value + fee } DREAM (value + fee) is required for this transaction.</span>;\n  // const warningMessage = null;\n  return (\n    <div className=\"app\">\n      <section className=\"app-body\">\n        <h1 className=\"head-title\">Transfer</h1>\n        {/* <div className=\"head-subtitle\">Delegated token transaction</div> */}\n        <div className=\"token-info\">\n          { value } <TokenLogo /> DREAM\n        </div>\n        <div className=\"sender-and-recipient-block\">\n          <div>\n            <div>\n              <input value={ sender } disabled/>\n            </div>\n            <div className=\"address-sub\">\n              Sender (You)\n            </div>\n          </div>\n          <TransferArrow />\n          <div>\n            <div>\n              <input value={ recipient } disabled/>\n            </div>\n            <div className=\"address-sub\">\n              Recipient\n            </div>\n          </div>\n        </div>\n        <div className=\"spec-table\">\n          <div className=\"spec-table-row\">\n            <div>Fee for Sender</div>\n            <div className=\"strong\">{ fee } <TokenLogo/> DREAM</div>\n          </div>\n          <div className=\"spec-table-row\">\n            <div>Confirmation Time</div>\n            <div>~3 minutes</div>\n          </div>\n        </div>\n        { warningMessage && <div className=\"warning-message\">\n          <WarningIcon /> { warningMessage }\n        </div>}\n        <div className=\"center\">\n          <button className={ warningMessage ? \"unavailable\" : \"\" }>Confirm</button>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}